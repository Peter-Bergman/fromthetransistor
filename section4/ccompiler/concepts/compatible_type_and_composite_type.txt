Two types have compatible type if their types are the same.
Additional rules for determining whether two types are compatible are described in 6.7.2 for type specifiers, in 6.7.3 for type qualifiers, and in 6.7.6 for declarators.

Two structure, union, or enumerated types declared in separate translation units are compatible if their tags and members satisfy the following requirements:
 - If one is declared with a tag, the other shall be declared with the same tag. 
 - If both are completed anywhere within their respective translation units, then the following additional requirements apply:
	- There shall be a one-to-one correspondence between their members such that each pair of corresponding members are declared with compatible types
	- If one member of the pair is declared with an alignment specifier, the other is declared with an equivalent alignment specifier
	- If one member of the pair is declared with a name, the other is declared with the same name.
	- For two structures, corresponding members shall be declared in the same order.
	- For two structures or unions, corresponding bit-fields shall have the same widths.
	- For two enumerations, corresponding members shall have the same values.

All declarations that refer to the same object or function shall have compatible type; otherwise, the behavior is undefined.

A composite type can be constructed from two types that are compatible; it is a type that is compatible with both of the two types and satisfies the following conditions:
	- If both types are array types, the following rules are applied:
		- If one type is an array of known constant size, the composite type is an array of that size.
		- Otherwise, if one type is a variable length array whose size is specified by an expression that is not evaluated, the behavior is undefined.
		- Otherwise, if one type is a variable length array whose size is specified, the composite type is a variable length array of that size.
		- Otherwise, if one type is a variable length array of unspecified size, the composite type is a variable length array of unspecified size.
		- Otherwise, both types are arrays of unknown size and the composite type is an array of unknown size.
	- If only one type is a function type with a parameer type list (a function prototype), the composite type is a function prototype with the parameter type list.
	- If both ypes are function types with parameter type liss, the type of each parameer in the composite parameter type list is the composite type of the corresponding parameters.

These rules apply recursively to the types from which the two types are derived.

For an identifier with internal or external linkage declared in a scope in which a prior declaration of that identifier is visible, if the prior declaration specifies internal or external linkage, the type of the identifier at the later declaration becomes the composite type.


