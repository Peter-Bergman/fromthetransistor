token:
	keyword
	identifier
	constant
	string-literal
	punctuator

preprocessing-token:
	header-name
	identifier
	pp-number
	character-constant
	string-literal
	punctuator
	each non-white-space character that cannot be one of the above
	(An additional category, placemarkers, is used internally in translation phase 4 (see 6.10.3.3) it cannot occur in source files)

------------------------------ Constraints -----------------------------------

Each preprocessing token that is converted to a token shall have the lexical form of a keyword, an identifier, a constant, a string literal, or a punctuator.


-------------------------------- Semantics ------------------------------------

A token is the minimal lexical element of the language in translation phases 7 and 8.
A preprocessing token is the minimal lexical element of the language in translation phases 3 through 6.
-- I am wondering what those phases are and where I can find all of them.
If a ' or a " character matches the last category of preprocessing tokens, the behavior is undefined.
Preprocessing tokens can be separated by white space; this consists of comments, or white-space characters (space, horizontal tab, new-line, vertical tab, and form-feed), or both.
As described in 6.10, in certain circumstances during translation phase 4, white space (or the abscence thereof) serves as more than preprocessing token separation.
White space may appear within a preprocessing token only as part of a header name or between the quotation characters in a character constant or string literal.

If the input stream has been parsed into preprocessing tokens up to a given character, the next preprocessing token is the longest sequence of characters that could constitute a preprocessing token.
There is one exception to this rule:
	header name preprocessing tokens are recognized only within #include preprocessing directives and in implementation-defined locations within #pragma directives.
	In such contexts, a sequence of characters that could be either a header name or a string literal is recognized as the former.


