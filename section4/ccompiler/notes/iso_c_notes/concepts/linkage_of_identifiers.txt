An identifier declared in different scopes or in the same scope more than once can be made to refer to the same object or function by a process called linkage. There are three kinds of linkage: external, internal, and none.

In the set of translation units and libraries that constitutes an entire program, each declaration of a particular identifier with external linkage denotes the same object or function. 
Within one translation unit, each declaration of an identifier with internal linkage denotes the same object or function. 
Each declaration of an identifier with no linkage denotes a unique entity.

If the declaration of a file scope identifier for an object or a function contains the storage class specifier static, the identifier has internal linkage.

For an identifier declared with the storage-class specifier extern in a scope in which a prior declaration of that identifier is visible, if the prior declaration specifies internal or external linkage, the linkage of the identifier at the later declaration is the same as the linkage specified at the prior declaration.
If no prior declaration is visible, or if the prior declaration specifies no linkage, then the identifier has external linkage.


A function with no storage-class specifier has same storage-class properties as extern.
An object with file scope and no storage-class specifier has external linkage.

Following identifiers have no linkage:
 - identifier declared to be anything other than an object or function
 - function parameter identifier
 - block scope identifier for an object declared without the storage-class specifier extern

If, within a translation unit, the same identifier appears wih both internal and external linkage, the behavior is undefined.


